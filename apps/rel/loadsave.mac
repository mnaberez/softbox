;LOADSAVE.REL

        .Z80                    ;set mode for M80
        NAME    ('LOADSA')
        GLOBAL  EXSYS           ;Execute a new CP/M system
        GLOBAL  SAVESY          ;Write CP/M image to an IEEE-488 drive
        GLOBAL  RDSYS           ;Read CP/M image from an IEEE-488 drive
        GLOBAL  BUFFIN          ;Buffered Console Input
        GLOBAL  IDISK           ;Initialize an IEEE-488 disk drive
        GLOBAL  DSKERR          ;Check CBM DOS error, print error if not OK
        GLOBAL  FORMAT          ;Format an IEEE-488 drive for SoftBox use
        GLOBAL  CREAD           ;Read CP/M image from a Corvus drive
        GLOBAL  CWRITE          ;Write CP/M image to a Corvus drive
        GLOBAL  CFORM           ;Format a Corvus drive for SoftBox use
        GLOBAL  DTYPE           ;Get the drive type for a CP/M drive number
        GLOBAL  CREAD2          ;Track loop for CREAD
        GLOBAL  CREAD1          ;Sector loop for CREAD
        GLOBAL  CWRIT3          ;Error handler for CREAD and CWRITE
        GLOBAL  CWRIT2          ;Track loop for CWRITE
        GLOBAL  CWRIT1          ;Sector loop for CWRITE

BUFFIN:
;Buffered Console Input.  Caller must store buffer size at 80h.  On
;return, 81h will contain the number of data bytes and the data
;will start at 82h.
;
        LD      C,0AH           ;C = Buffered Console Input
        LD      DE,080H         ;DE = Default DMA buffer area (128 bytes)
        JP      05H             ;BDOS System Call

EXSYS:
;Execute a new CP/M system.  The buffer at 4000h contains a new
;CP/M system image (7168 bytes = CCP + BDOS + BIOS config + BIOS storage).
;Copy the new system into place and then jump to the BIOS to start it.
;
        LD      BC,01C00H       ;BC = 7168 bytes to copy
        LD      HL,04000H       ;HL = address of new CP/M system image
        LD      DE,0D400H       ;DE = base address of CP/M system image
        LDIR                    ;Copy BC bytes from (HL) to (DE)
        JP      0F075H          ;Perform system init and then run CP/M

RDSYS:
;Read the "CP/M" and "K" files from an IEEE-488 drive into memory.
;
;HL = pointer to CP/M drive number of an IEEE-488 drive
;
;4000-5BFF  "CP/M"  CCP + BDOS + BIOS Config + BIOS Working Storage
;6000-67FF  "K"     Terminal program that runs on the CBM computer
;
        LD      A,(HL)          ;A = CP/M drive number
        LD      (@L0),A         ;Store drive number in @L0

        CALL    0F054H          ;D = BIOS Get device addr for CP/M drive num
        LD      E,00H           ;E = Secondary address 0
        PUSH    DE              ;Push IEEE-488 primary & secondary addrs

                                ;Open "CP/M" file (CP/M image):
        CALL    @L1             ;  Open "CP/M" file
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F05AH          ;  BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;  Store CBM DOS error code in @L2

                                ;Read "CP/M" file into buffer at 4000h:
        LD      HL,04000H       ;  HL = base address of buffer for CP/M image
        LD      BC,01C00H       ;  BC = 7168 bytes in CP/M image

        POP     DE              ;  Pop IEEE-488 primary & secondary addrs
        OR      A               ;  Set flags to check error (0=OK)
        RET     NZ              ;  Return if not OK

        PUSH    DE              ;  Push IEEE-488 primary & secondary addrs
        CALL    0F039H          ;  BIOS Send TALK to an IEEE-488 device
@L23:
        CALL    0F03FH          ;  BIOS Read byte from an IEEE-488 device
        LD      (HL),A          ;  Save byte read into buffer
        INC     HL              ;  Increment buffer pointer
        DEC     BC              ;  Decrement bytes remaining to read
        LD      A,B             ;  A = B
        OR      C               ;  OR with C to check if BC=0
        JR      NZ,@L23         ;  Loop until all bytes are read

                                ;Close "CP/M" file:
        CALL    0F03CH          ;  BIOS Send UNTALK to all IEEE-488 devices
        POP     DE              ;  Pop IEEE-488 primary & secondary addrs
        PUSH    DE              ;  Push IEEE-488 primary & secondary addrs
        CALL    0F060H          ;  BIOS Close an open file on IEEE-488 device
        POP     DE              ;  Pop IEEE-488 primary & secondary addrs

                                ;Open the "K" file (CBM terminal):
        PUSH    DE              ;  Push IEEE-488 primary & secondary addrs
        CALL    @L3             ;  Open "K" file
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F05AH          ;  BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;  Store CBM DOS error code in @L2

                                ;Read the "K" file into buffer at 6000h:
        LD      HL,06000H       ;  HL = base address of buffer for term
        LD      BC,0800H        ;  BC = 2048 bytes in terminal program

        POP     DE              ;  Pop IEEE-488 primary & secondary addrs
        OR      A               ;  Set flags to check CBM DOS error (0=OK)
        RET     NZ              ;  Return if not OK

        PUSH    DE              ;  Push IEEE-488 primary & secondary addrs
        CALL    0F039H          ;  BIOS Send TALK to an IEEE-488 device
@L24:
        CALL    0F03FH          ;  BIOS Read byte from an IEEE-488 device
        LD      (HL),A          ;  Save byte read into buffer
        INC     HL              ;  Increment buffer pointer
        DEC     BC              ;  Decrement bytes remaining to read
        LD      A,B             ;  A = B
        OR      C               ;  OR with C to check if BC=0
        JR      NZ,@L24         ;  Loop until all bytes are read

                                ;Close "K" file:
        CALL    0F03CH          ;  BIOS Send UNTALK to all IEEE-488 devices
        POP     DE              ;  Pop IEEE-488 primary & secondary addrs
        CALL    0F060H          ;  BIOS Close open file on an IEEE-488 device
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F05AH          ;  BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;  Store CBM DOS error code in @L2
        RET

CREAD:
;Read CP/M image from a Corvus drive.
;
;HL = pointer to CP/M drive number of Corvus
;
        LD      C,(HL)          ;C = CP/M drive number
        CALL    0F01BH          ;BIOS Select disk drive
        LD      DE,04000H       ;DE = start address of CP/M image buffer
        LD      BC,00H          ;BC = track 0

CREAD2:
;Track loop
        CALL    0F01EH          ;BIOS Set track number
        PUSH    BC              ;Push track number
        LD      BC,00H          ;BC = sector 0

CREAD1:
;Sector loop
        CALL    0F021H          ;BIOS Set sector number
        PUSH    BC              ;Push sector number

                                ;Read the sector from the Corvus:
        PUSH    DE              ;  Push buffer pointer
        CALL    0F027H          ;  BIOS Read selected sector
        OR      A               ;  Set flags to check CP/M error (0=OK)
        JR      NZ,CWRIT3       ;  Jump to unrecoverable error if not OK
        POP     DE              ;  Pop buffer pointer

                                ;Copy data for one sector out of DMA buffer:
        LD      BC,080H         ;  BC = 128 bytes to copy (one sector)
        LD      HL,080H         ;  HL = CP/M standard DMA buffer area
        LDIR                    ;  Copy BC bytes from (HL) to (DE)

                                ;Increment to next sector:
        POP     BC              ;  Pop sector number
        INC     C               ;  Increment to next sector
        LD      A,C             ;  A = sector number
        CP      040H            ;  Read all 64 sectors on the track?
        JR      NZ,CREAD1       ;      No: loop to do next sector

                                ;Increment to next track:
        POP     BC              ;  Pop track number
        INC     C               ;  Increment to next track
        LD      A,C             ;  A = track number
        CP      02H             ;  Read 2 tracks?
        JR      NZ,CREAD2       ;    No: loop to do next track
        RET

CWRITE:
;Write CP/M image to a Corvus drive.
;
;HL = pointer to CP/M drive number of Corvus
;
        LD      C,(HL)          ;C = CP/M drive number
        CALL    0F01BH          ;BIOS Select disk drive
        LD      HL,04000H       ;HL = start address of CP/M image buffer
        LD      BC,00H          ;BC = track 0

CWRIT2:
;Track loop
        CALL    0F01EH          ;BIOS Set track number
        PUSH    BC              ;Push track number
        LD      BC,00H          ;BC = sector 0

CWRIT1:
;Sector loop
        CALL    0F021H          ;BIOS Set sector number
        PUSH    BC              ;Push sector number

                                ;Copy data for one sector into DMA buffer:
                                ;  HL contains pointer to CP/M image
        LD      BC,080H         ;  BC = 128 bytes to copy (one sector)
        LD      DE,080H         ;  DE = CP/M standard DMA buffer area
        LDIR                    ;  Copy BC bytes from (HL) to (DE)

                                ;Write the sector to the Corvus:
        PUSH    HL              ;  Push buffer pointer
        CALL    0F02AH          ;  BIOS Write selected sector
        OR      A               ;  Set flags to check CP/M error (0=OK)
        JR      NZ,CWRIT3       ;  Jump to unrecoverable error if not OK
        POP     HL              ;  Pop buffer pointer

                                ;Increment to next sector:
        POP     BC              ;  Pop sector number
        INC     C               ;  Increment to next sector
        LD      A,C             ;  A = sector number
        CP      040H            ;  Wrote all 64 sectors on the track?
        JR      NZ,CWRIT1       ;    No: loop to do next sector

                                ;Increment to next track:
        POP     BC              ;  Pop track number
        INC     C               ;  Increment to next track number
        LD      A,C             ;  A = track number
        CP      02H             ;  Wrote 2 tracks?
        JR      NZ,CWRIT2       ;    No: loop to do next track
        RET

CWRIT3:
;An error occurred during CREAD or CWRITE.  Clean up the stack,
;then jump to the "Hit any key to abort" message (the message is
;not a choice, it will always abort).
;
        POP     HL              ;Pop buffer pointer
        POP     HL              ;Pop sector number
        POP     HL              ;Pop track number
        JP      @L4             ;Jump to "Hit any key to abort"

DTYPE:
;Get the drive type for a CP/M drive number.
;
;HL = pointer to a two-byte signed integer that contains a CP/M
;     drive number.  It will be overwritten with the drive's type.
;
;TODO: The BIOS routine at 0f051h (get_dtype) uses the carry to indicate
;if the drive is valid but this code does not check the carry.  Is
;this a bug?
;
                                ;Read drive number from two-byte signed int:
        LD      A,(HL)          ;  A = CP/M drive number from low byte
                                ;  (the high byte is ignored)

        CALL    0F051H          ;BIOS Get drive type for a CP/M drive number

                                ;Store drive type in two-byte signed int:
        LD      (HL),C          ;  Store drive type in low byte
        INC     HL              ;  Increment pointer to high byte
        LD      (HL),00H        ;  Store zero in high byte
        RET

IDISK:
;Initialize an IEEE-488 disk drive.
;
;HL = pointer to a CP/M drive number
;
        LD      A,(HL)          ;A = CP/M drive number
        JP      0F078H          ;Initialize an IEEE-488 disk drive

DSKERR:
;Check the last CBM DOS error.  The drive is not queried; this
;only reads the last error code saved in @L2.  The error code is
;returned to the caller by storing at in the address at HL.
;
;If an error occurred, "Disk error : " will be printed followed
;by the CBM DOS error message.  If no error occurred, nothing
;will be printed.
;
;HL = pointer to a two-byte signed integer that will receive
;     the error code
;
        LD      A,(@L2)         ;A = last CBM DOS error code

                                ;Store error in two-byte signed int at HL:
        LD      (HL),A          ;  Store error code in low byte
        INC     HL              ;  Increment pointer to high byte
        XOR     A               ;  A = 0
        LD      (HL),A          ;  Store zero in high byte

        LD      A,(@L2)         ;A = last CBM DOS error code
        OR      A               ;Set flags to check CBM DOS error (0=OK)
        RET     Z               ;Return if OK

        LD      DE,@L5          ;DE = address of "Disk Error" string
        LD      C,09H           ;C = Output String
        CALL    05H             ;BDOS System Call

        LD      HL,0EAC0H       ;HL = address of last CBM DOS error message
@L25:
        LD      E,(HL)          ;E = read char from error message
        PUSH    HL              ;Save HL
        LD      C,02H           ;C = Console Output
        CALL    05H             ;BDOS System Call
        POP     HL              ;Recall HL

        INC     HL              ;Move to next char in error message
        LD      A,(HL)          ;A = read char from error message
        CP      0DH             ;Is it a carriage return?
        JR      NZ,@L25         ;  No: Loop to continue printing the msg

        LD      DE,@L6          ;DE = address of CR+LF+"$"
        LD      C,09H           ;C = Output String
        CALL    05H             ;BDOS System Call
        RET

@L5:
        DB 0DH,0AH,"Disk error : $"

@L6:
        DB 0DH,0AH,"$"

@L1:
;Open "CP/M" file on an IEEE-488 drive
;
        LD      C,06H           ;C = 6 chars in string
        LD      HL,@L7          ;HL = address of "0:CP/M" string

        LD      A,(@L0)         ;Get current CP/M drive number from @L0
        RRA                     ;Rotate bit 0 (CBM drive number) into carry
                                ;If CBM drive number 0:
        JP      NC,0F05DH       ;  BIOS Open a file on an IEEE-488 device
                                ;If CBM drive number 1:
        LD      HL,@L8          ;  HL = address of "1:CP/M" string
        JP      0F05DH          ;  BIOS Open a file on an IEEE-488 device

@L3:
;Open "K" file on an IEEE-488 drive
;
        LD      C,03H           ;C = 3 chars in string
        LD      HL,@L9          ;HL = address of "0:K" string
        LD      A,(@L0)         ;Get current CP/M drive number from @L0
        RRA                     ;Rotate bit 0 (CBM drive number) into carry
                                ;If CBM drive number 0:
        JP      NC,0F05DH       ;  BIOS Open a file on an IEEE-488 device
                                ;If CBM drive number 1:
        LD      HL,@L10         ;  HL = address of "1:K" string
        JP      0F05DH          ;  BIOS Open a file on an IEEE-488 device

SAVESY:
;Read the CP/M system image from an IEEE-488 drive.
;
;HL = pointer to CP/M drive number of an IEEE-488 drive
;
        LD      A,(HL)          ;A = CP/M drive number
        LD      (@L0),A         ;Store drive number in @L0

        CALL    0F054H          ;D = BIOS Get device addr for CP/M drive num
        PUSH    DE              ;Push DE (D = IEEE-488 primary address)
        LD      E,0FH           ;E = IEEE-488 secondary address 15 (cmd chan)

        LD      HL,@L11         ;HL = address of "S0:*" string
        LD      A,(@L0)         ;Get current CP/M drive number from @L0
        RRA                     ;Rotate bit 0 (CBM drive number) into carry
                                ;If CBM drive number 0:
        JR      NC,@L26         ;  Jump to keep "S0:*" string
                                ;If CBM drive number 1:
        LD      HL,@L12         ;  HL = address of "S1:*" string
@L26:
        LD      C,04H           ;C = 4 chars in string
        CALL    0F05DH          ;BIOS Open a file on an IEEE-488 device
        LD      A,(@L0)         ;Get current CP/M drive number from @L0
        CALL    0F05AH          ;BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;Store CBM DOS error code in @L2

        POP     DE
        CP      01H             ;CBM DOS error code = 1 file scratched?
        RET     NZ              ;  No: something went wrong, return on error.
        LD      E,01H
        PUSH    DE

        CALL    @L3             ;Open "K" file
        LD      A,(@L0)         ;Get current CP/M drive number from @L0
        CALL    0F05AH          ;BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;Store CBM DOS error code in @L2
        POP     DE
        OR      A               ;Set flags to check CBM DOS error (0=OK)
        RET     NZ              ;Return if not OK

        PUSH    DE
        CALL    0F033H          ;BIOS Send LISTEN to an IEEE-488 device
        LD      HL,06000H       ;HL = base address of buffer for term
        LD      BC,0800H        ;BC = 2048 bytes in terminal program
@L27:
        LD      A,(HL)
        CALL    0F042H          ;BIOS Send byte to an IEEE-488 device
        INC     HL
        DEC     BC
        LD      A,B
        OR      C
        JR      NZ,@L27
        CALL    0F036H          ;BIOS Send UNLISTEN to all IEEE-488 devices
        POP     DE
        PUSH    DE
        CALL    0F060H          ;BIOS Close an open file on an IEEE-488 device
        POP     DE
        PUSH    DE
        CALL    @L1             ;Open "CP/M" file
        LD      A,(@L0)         ;Get current CP/M drive number from @L0
        CALL    0F05AH          ;BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;Store CBM DOS error code in @L2
        POP     DE              ;Pop DE (D = IEEE-488 primary address)
        OR      A
        RET     NZ
        PUSH    DE
        CALL    0F033H          ;BIOS Send LISTEN to an IEEE-488 device

        LD      HL,04000H       ;HL = base address of buffer for CP/M image
        LD      BC,01C00H       ;BC = 7168 bytes in CP/M image
@L28:
        LD      A,(HL)
        CALL    0F042H          ;BIOS Send byte to an IEEE-488 device
        INC     HL
        DEC     BC
        LD      A,B
        OR      C
        JR      NZ,@L28
        CALL    0F036H          ;BIOS Send UNLISTEN to all IEEE-488 devices
        POP     DE
        CALL    0F060H          ;BIOS Close an open file on an IEEE-488 device
        LD      A,(@L0)         ;Get current CP/M drive number from @L0
        CALL    0F05AH          ;BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;Store CBM DOS error code in @L2
        RET

FORMAT:
;Format an IEEE-488 drive for SoftBox use.
;
;This routine first formats the disk with the CBM DOS.  It then fills the
;first 8 CBM DOS sectors with E5, which erases the CP/M directory.
;
;There are 64 directory entries * 32 bytes/entry = 2048 bytes.  Each CBM
;DOS sector is 256 bytes, so the CP/M directory occupies 8 CBM DOS sectors.
;
;TODO: The 4040 and 8050 drives have 64 directory entries in their DPHs but
;      the 8250 has 128 entries.  We should write E5 to the first 16 CBM DOS
;      sectors instead so the 8250 directory is cleared.
;
;HL = pointer to CP/M drive number of an IEEE-488 drive
;
        LD      A,(HL)          ;A = CP/M drive number
        LD      (@L0),A         ;Store drive number in @L0

        CALL    0F054H          ;D = BIOS Get device addr for a CP/M drive num

                                ;Set CBM drive number in format command:
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        AND     01H             ;  Mask off all except bit 1 (CBM drive num)
        ADD     A,030H          ;  Convert it to ASCII
        LD      (@L13+1),A      ;  Save it into format command ("N0:CP/M...")

                                ;Send format command:
                                ;  D contains IEEE-488 primary address
        LD      E,0FH           ;  E = file number (15 = command channel)
        LD      C,014H          ;  C = 20 chars in string
        LD      HL,@L13         ;  HL = address of "N0:CP/M V2.2 DISK,XX"
        CALL    0F05DH          ;  BIOS Open a file on an IEEE-488 device

                                ;Check result of format command:
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F05AH          ;  BIOS Read error channel of IEEE-488 device
        LD      (@L2),A         ;  Store CBM DOS error code in @L2
        OR      A               ;  Set flags to check CBM DOS error (0=OK)
        RET     NZ              ;  Return if not OK

                                ;Initialize the drive:
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F078H          ;  BIOS Initialize an IEEE-488 disk drive

                                ;Fill 4000-40FF with E5 ("unused"):
        LD      HL,04000H       ;  HL = source start address
        LD      DE,04001H       ;  DE = destination start address
        LD      BC,0FFH         ;  BC = 255 bytes to copy
        LD      (HL),0E5H       ;  Store E5 ("unused") in 4000h
        LDIR                    ;  Copy BC bytes from (HL) to (DE)

                                ;Initialize CBM DOS track and sector numbers:
        LD      A,07H           ;
        LD      (@L15),A        ;  CBM DOS sector = 7
        LD      A,01H           ;
        LD      (@L16),A        ;  CBM DOS track = 1

@L18:
;Clear the CP/M directory by filling it with E5 ("unused").
;
        CALL    @L17            ;Write the CBM DOS sector

                                ;Check CBM DOS error:
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F05AH          ;  BIOS Read error channel of IEEE-488 device
                                ;    Returns CBM DOS error code in A (0=OK)
        LD      (@L2),A         ;  Store CBM DOS error code in @L2
        OR      A               ;  Set flags to CBM DOS check error (0=OK)
        RET     NZ              ;  Return if not OK

        LD      HL,@L15         ;HL = pointer to CBM DOS sector
        DEC     (HL)            ;Decrement sector
        JP      P,@L18          ;Loop until sector goes negative
        RET

@L17:
;Write a sector to an IEEE-488 drive.
;
;The following locations must be set up:
;
;  4000-40FF: 256 bytes data to write into the sector
;  @L0:   IEEE-488 primary address
;  @L16:  CBM DOS track
;  @L15:  CBM DOS sector
;
                                ;Put first byte into sector buffer using M-W:
        LD      HL,@L19         ;  HL = address of "M-W..." string
        LD      C,06H           ;  C = 6 chars in string
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F057H          ;  BIOS Open command channel on IEEE-488 dev
        CALL    0F04BH          ;  BIOS BIOS Send string to an IEEE-488 device
        LD      A,(04000H)      ;  A = first byte
        CALL    0F045H          ;  BIOS Send byte to IEEE-488 device with EOI
        CALL    0F036H          ;  BIOS Send UNLISTEN to all IEEE-488 devices

                                ;Move drive's buffer pointer to second byte:
        LD      HL,@L20         ;  HL = address of "B-P 2 1" string
        LD      C,07H           ;  C = 7 chars in string
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F057H          ;  BIOS Open command channel on IEEE-488 dev
        CALL    0F04BH          ;  BIOS BIOS Send string to an IEEE-488 device
        CALL    0F048H          ;  BIOS Send CR to IEEE-488 device with EOI
        CALL    0F036H          ;  BIOS Send UNLISTEN to all IEEE-488 devices

                                ;Put remaining 255 bytes into sector buffer:
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F054H          ;  D = BIOS Get device addr for CP/M drive num
        LD      E,02H           ;  E = secondary address 2
        CALL    0F033H          ;  BIOS Send LISTEN to an IEEE-488 device
        LD      HL,04001H       ;  HL = start address
        LD      C,0FFH          ;  C = 255 bytes to send
        CALL    0F04BH          ;  BIOS Send string to an IEEE-488 device
        CALL    0F036H          ;  BIOS Send UNLISTEN to all IEEE-488 devices

                                ;The drive's sector buffer now contains the
                                ;256 bytes from 4000-40FF.

                                ;Send "U2 2 <trk> <sec>" to write the sector:
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        CALL    0F057H          ;  BIOS Open command channel on IEEE-488 dev
        LD      HL,@L21         ;  HL = address of "U2 2 " string
        LD      C,05H           ;  C = 5 chars in string
        CALL    0F04BH          ;  BIOS Send string to an IEEE-488 device
                                ;
        LD      A,(@L0)         ;  Get current CP/M drive number from @L0
        AND     01H             ;  Mask off all except bit 1 (CBM drive num)
        ADD     A,030H          ;  Convert it to ASCII
        CALL    0F042H          ;  BIOS Send byte to an IEEE-488 device
                                ;
        LD      A,(@L16)        ;  CBM DOS track
        CALL    0F04EH          ;  BIOS Send number in decimal to IEEE-488 dev
                                ;
        LD      A,(@L15)        ;  CBM DOS sector
        CALL    0F04EH          ;  BIOS Send number in decimal to IEEE-488 dev
                                ;
        CALL    0F048H          ;  BIOS Send CR to IEEE-488 device with EOI
        JP      0F036H          ;  BIOS Send UNLISTEN to all IEEE-488 devices

CFORM:
;Format a Corvus drive for Softbox use.
;
;HL = pointer to CP/M drive number of Corvus
;
;This routine fills all of track 2 with E5, which erases the CP/M directory.
;No other areas of the disk are affected.
;
;The first two tracks (tracks 0 and 1) are reserved for SoftBox boot data.
;Track 2 is dedicated to the CP/M directory.  There are 256 directory
;entries * 32 bytes/entry = 8192 bytes, which is the exact size of the
;track (64 sectors * 128 bytes/sector = 8192 bytes).
;
        LD      C,(HL)          ;C = CP/M drive number
        CALL    0F01BH          ;BIOS Select disk drive

                                ;Fill DMA buffer with E5 ("unused"):
        LD      HL,080H         ;  HL = CP/M standard DMA buffer area
@L29:                           ;
        LD      (HL),0E5H       ;  Store E5 ("unused") in DMA
        INC     L               ;  Increment DMA pointer
        JR      NZ,@L29         ;  Loop until DMA is filled (0080-00FF)

                                ;Set track 2 (first track after reserved):
        LD      BC,02H          ;  BC = track 2
        CALL    0F01EH          ;  BIOS Set track number

                                ;Fill all sectors on track 2 with E5:
        LD      BC,00H          ;  BC = sector number
@L30:                           ;
        PUSH    BC              ;  Push sector number
        CALL    0F021H          ;  BIOS Set sector number
        CALL    0F02AH          ;  BIOS Write selected sector
        POP     BC              ;  Pop sector number
                                ;
        OR      A               ;  Set flags to check CP/M error (0=OK)
        JP      NZ,@L4          ;  Jump if not OK
                                ;
        INC     BC              ;  Increment to next sector
        LD      A,C             ;  A = sector number
        CP      040H            ;  All 64 sectors filled?
        JR      NZ,@L30         ;    No: loop to do next sector
        RET

@L4:
;Display "Hit any key to abort" message, wait for a key, and then return.
;
        LD      DE,@L22         ;DE = address of "Hit any key to"
        LD      C,09H           ;C = Output String
        CALL    05H             ;BDOS System Call

        LD      C,01H           ;C = Console Input
        JP      05H             ;Jump out to BDOS System Call.

@L22:
        DB 0DH,0AH,'Hit any key to abort : $'

@L21:
        DB 'U2 2 '

@L13:
        DB 'N0:CP/M V2.2 DISK,XX'

@L20:
        DB 'B-P 2 1'

@L19:
        DB 'M-W',00,13H,01
        DB '#2'

@L16:
;CBM DOS track
        DS 1

@L15:
;CBM DOS sector
        DS 1

@L11:
        DB 'S0:*'
@L12:
        DB 'S1:*'

@L7:
        DB '0:CP/M'
@L8:
        DB '1:CP/M'

@L9:
        DB '0:K'

@L10:
        DB '1:K'

@L0:
;Current CP/M drive number
        DS 1

@L2:
;Last CBM DOS error code
        DS 1
;
        END
