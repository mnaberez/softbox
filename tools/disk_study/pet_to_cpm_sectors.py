# Print mapping of PET sectors to CP/M sectors

import sys

class SectorMapper(object):
    def __init__(self, stdout=None):
        self.stdout = stdout or sys.stdout

    def load_and_report(self, pet_csv_filename, cpm_csv_filename):
        self.load_pet_csv(pet_csv_filename)
        self.load_cpm_csv(cpm_csv_filename)
        self.analyze_data()
        self.print_report()

    def load_pet_csv(self, filename):
        '''Read PET data lines generated by make_test_image.py
        [[pet track, pet sector, pet sector half 0/1, identifier], ...]'''
        self.pet_data = []
        with open(filename) as f:
            for line in f.readlines():
                if line.lstrip().startswith(';'):
                    continue
                if "," in line:
                    parts = [ int(x, 16) for x in line.split(",") ]
                    self.pet_data.append(parts)

    def load_cpm_csv(self, filename):
        '''Read CP/M data lines generated by readall.com
        [cp/m track, cp/m sector, identifier], ...]'''
        self.cpm_data = []
        with open(filename) as f:
            for line in f.readlines():
                if line.lstrip().startswith(";"):
                    continue
                if "BDOS err" in line:
                    break
                if "," in line:
                    parts = [ int(x, 16) for x in line.split(",") ]
                    self.cpm_data.append(parts)

    def analyze_data(self):
        # {(pet t, pet s): [cp/m ts, (c/m ts)], ...}
        #   cp/m ts may be a tuple (t,s), Unused, or Multiple
        self.pet_to_cpm = {}
        # set([(cp/m track, cp/m sector), ...])
        self.corrupted_cpm_sectors = set()
        # set([(pet track, pet sector, pet half), ...])
        self.crossed_pet_half_sectors = set()
        # set([(pet track, pet sector, pet half), ...])
        self.unused_pet_half_sectors = set()
        # set([pet track, pet track, pet track])
        self.unused_pet_tracks = set()

        # {id: (pet track, pet sector, pet sector half 0/1), ...}
        ids_to_pet_info = {}
        for track, sector, half, identifier in self.pet_data:
            ids_to_pet_info[identifier] = (track, sector, half)

        for cpm_track, cpm_sector, identifier in self.cpm_data:
            if identifier not in ids_to_pet_info:
                self.corrupted_cpm_sectors.add((cpm_track, cpm_sector,))
                continue

            pet_track, pet_sector, pet_half = ids_to_pet_info[identifier]
            pet_ts = (pet_track, pet_sector)
            cpm_ts = (cpm_track, cpm_sector)

            if pet_ts not in self.pet_to_cpm:
                self.pet_to_cpm[pet_ts] = [Unused, Unused]

            if self.pet_to_cpm[pet_ts][pet_half] is Unused:
                self.pet_to_cpm[pet_ts][pet_half] = cpm_ts
            else:
                self.pet_to_cpm[pet_ts][pet_half] = Multiple
                self.crossed_pet_half_sectors.add(
                    (pet_track, pet_sector, pet_half)
                    )

        for pet_ts, cpm_ts_list in self.pet_to_cpm.items():
            for pet_half in (0, 1):
                if cpm_ts_list[pet_half] is Unused:
                    pet_track, pet_sector = pet_ts
                    self.unused_pet_half_sectors.add(
                        (pet_track, pet_sector, pet_half)
                        )

        used_pet_tracks = set([ t for t, s in self.pet_to_cpm.keys() ])
        max_pet_track = max([ t for t, s, h, i in self.pet_data ])
        all_pet_tracks = set(range(1, max_pet_track+1))
        self.unused_pet_tracks = all_pet_tracks - used_pet_tracks

    def print_report(self):
        self._print_headers()
        self._print_mapping()
        self._print_crossed_pet_half_sectors()
        self._print_corrupted_cpm_sectors()
        self._print_unused_pet_half_sectors()
        self._print_unused_pet_tracks()

    def _print_headers(self):
        headers = (
            ";This file was generated by pet_to_cpm_sectors.py",
            ";All numbers in decimal",
            ""
            )
        for header in headers:
            self.stdout.write(header + "\n")

    def _print_mapping(self):
        head = (";PET Track & Sector: "
                "[CP/M Track & Sector, CP/M Track & Sector]")
        self.stdout.write("%s\n" % head)
        for pet_ts in sorted(self.pet_to_cpm.keys()):
            sector_halves = []
            for cpm_ts in self.pet_to_cpm[pet_ts]:
                if cpm_ts is Unused:
                    sector_halves.append('UNUSED')
                elif cpm_ts is Multiple:
                    sector_halves.append('MULTIPLE')
                else:
                    sector_halves.append("%03d_%02d" % cpm_ts)
            self.stdout.write("%s: [%s]\n" % (
                "%03d_%02d" % pet_ts,
                ", ".join(sector_halves))
                )

    def _print_crossed_pet_half_sectors(self):
        if self.crossed_pet_half_sectors:
            head = "\n;Multiple CP/M sectors map to these PET sectors:\n"
            self.stdout.write(head)
            for track, sector, half in self.crossed_pet_half_sectors:
                lower_upper = ("lower", "upper")[half]
                self.stdout.write(
                    ";  %03d_%02d (%s half)\n" % (track, sector, lower_upper)
                    )

    def _print_corrupted_cpm_sectors(self):
        if self.corrupted_cpm_sectors:
            head = "\n;CP/M sectors that read identifiers not in the image:\n"
            self.stdout.write(head)
            for cpm_ts in sorted(self.corrupted_cpm_sectors):
                self.stdout.write(";  %03d_%02d\n" % cpm_ts)

    def _print_unused_pet_half_sectors(self):
        '''Print PET sectors with unused space
           (any PET sector with less than 2 CP/M sectors mapped to it)'''
        if self.unused_pet_half_sectors:
            head = "\n;PET sectors with space unused by CP/M: \n"
            self.stdout.write(head)
            for track, sector, half in sorted(self.unused_pet_half_sectors):
                lower_upper = ("lower", "upper")[half]
                self.stdout.write(
                    ";  %03d_%02d (%s half)\n" % (track, sector, lower_upper)
                    )

    def _print_unused_pet_tracks(self):
        '''Print PET tracks completely unused by CP/M'''
        if self.unused_pet_tracks:
            head = "\n;PET tracks that are completely unused by CP/M:\n"
            self.stdout.write(head)
            for track in sorted(self.unused_pet_tracks):
                self.stdout.write(";  %03d\n" % track)

Unused = object() # pet half sector is unused by cp/m
Multiple = object() # more than one cp/m sector uses the same pet half sector

def main(argv, stdout, stderr, exit):
    if len(argv) != 3:
        stderr.write("Usage: python <pet_sectors.csv> <cpm_sectors.csv>\n")
        exit(1)
    SectorMapper().load_and_report(argv[1], argv[2])

if __name__ == "__main__":
    main(sys.argv, sys.stdout, sys.stderr, sys.exit)
